/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcAlignment2DHorizontal.h"
#include "ifcpp/IFC4/include/IfcAlignment2DVertical.h"
#include "ifcpp/IFC4/include/IfcAlignmentCurve.h"
#include "ifcpp/IFC4/include/IfcLabel.h"
#include "ifcpp/IFC4/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4/include/IfcStyledItem.h"

// ENTITY IfcAlignmentCurve 
IfcAlignmentCurve::IfcAlignmentCurve( int id ) { m_entity_id = id; }
shared_ptr<BuildingObject> IfcAlignmentCurve::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcAlignmentCurve> copy_self( new IfcAlignmentCurve() );
	if( m_Horizontal ) { copy_self->m_Horizontal = dynamic_pointer_cast<IfcAlignment2DHorizontal>( m_Horizontal->getDeepCopy(options) ); }
	if( m_Vertical ) { copy_self->m_Vertical = dynamic_pointer_cast<IfcAlignment2DVertical>( m_Vertical->getDeepCopy(options) ); }
	if( m_Tag ) { copy_self->m_Tag = dynamic_pointer_cast<IfcLabel>( m_Tag->getDeepCopy(options) ); }
	return copy_self;
}
void IfcAlignmentCurve::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCALIGNMENTCURVE" << "(";
	if( m_Horizontal ) { stream << "#" << m_Horizontal->m_entity_id; } else { stream << "$"; }
	stream << ",";
	if( m_Vertical ) { stream << "#" << m_Vertical->m_entity_id; } else { stream << "$"; }
	stream << ",";
	if( m_Tag ) { m_Tag->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IfcAlignmentCurve::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_entity_id; }
const std::wstring IfcAlignmentCurve::toString() const { return L"IfcAlignmentCurve"; }
void IfcAlignmentCurve::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 3 ){ std::stringstream err; err << "Wrong parameter count for entity IfcAlignmentCurve, expecting 3, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_Horizontal, map );
	readEntityReference( args[1], m_Vertical, map );
	m_Tag = IfcLabel::createObjectFromSTEP( args[2], map );
}
void IfcAlignmentCurve::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IfcBoundedCurve::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Horizontal", m_Horizontal ) );
	vec_attributes.emplace_back( std::make_pair( "Vertical", m_Vertical ) );
	vec_attributes.emplace_back( std::make_pair( "Tag", m_Tag ) );
}
void IfcAlignmentCurve::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IfcBoundedCurve::getAttributesInverse( vec_attributes_inverse );
}
void IfcAlignmentCurve::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcBoundedCurve::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcAlignmentCurve> ptr_self = dynamic_pointer_cast<IfcAlignmentCurve>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcAlignmentCurve::setInverseCounterparts: type mismatch" ); }
	if( m_Horizontal )
	{
		m_Horizontal->m_ToAlignmentCurve_inverse.emplace_back( ptr_self );
	}
	if( m_Vertical )
	{
		m_Vertical->m_ToAlignmentCurve_inverse.emplace_back( ptr_self );
	}
}
void IfcAlignmentCurve::unlinkFromInverseCounterparts()
{
	IfcBoundedCurve::unlinkFromInverseCounterparts();
	if( m_Horizontal )
	{
		std::vector<weak_ptr<IfcAlignmentCurve> >& ToAlignmentCurve_inverse = m_Horizontal->m_ToAlignmentCurve_inverse;
		for( auto it_ToAlignmentCurve_inverse = ToAlignmentCurve_inverse.begin(); it_ToAlignmentCurve_inverse != ToAlignmentCurve_inverse.end(); )
		{
			weak_ptr<IfcAlignmentCurve> self_candidate_weak = *it_ToAlignmentCurve_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_ToAlignmentCurve_inverse;
				continue;
			}
			shared_ptr<IfcAlignmentCurve> self_candidate( *it_ToAlignmentCurve_inverse );
			if( self_candidate.get() == this )
			{
				it_ToAlignmentCurve_inverse= ToAlignmentCurve_inverse.erase( it_ToAlignmentCurve_inverse );
			}
			else
			{
				++it_ToAlignmentCurve_inverse;
			}
		}
	}
	if( m_Vertical )
	{
		std::vector<weak_ptr<IfcAlignmentCurve> >& ToAlignmentCurve_inverse = m_Vertical->m_ToAlignmentCurve_inverse;
		for( auto it_ToAlignmentCurve_inverse = ToAlignmentCurve_inverse.begin(); it_ToAlignmentCurve_inverse != ToAlignmentCurve_inverse.end(); )
		{
			weak_ptr<IfcAlignmentCurve> self_candidate_weak = *it_ToAlignmentCurve_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_ToAlignmentCurve_inverse;
				continue;
			}
			shared_ptr<IfcAlignmentCurve> self_candidate( *it_ToAlignmentCurve_inverse );
			if( self_candidate.get() == this )
			{
				it_ToAlignmentCurve_inverse= ToAlignmentCurve_inverse.erase( it_ToAlignmentCurve_inverse );
			}
			else
			{
				++it_ToAlignmentCurve_inverse;
			}
		}
	}
}
