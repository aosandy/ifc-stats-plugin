/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcTransitionCurveType.h"

// TYPE IfcTransitionCurveType = ENUMERATION OF	(BIQUADRATICPARABOLA	,BLOSSCURVE	,CLOTHOIDCURVE	,COSINECURVE	,CUBICPARABOLA	,SINECURVE);
shared_ptr<BuildingObject> IfcTransitionCurveType::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcTransitionCurveType> copy_self( new IfcTransitionCurveType() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcTransitionCurveType::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCTRANSITIONCURVETYPE("; }
	switch( m_enum )
	{
		case ENUM_BIQUADRATICPARABOLA:	stream << ".BIQUADRATICPARABOLA."; break;
		case ENUM_BLOSSCURVE:	stream << ".BLOSSCURVE."; break;
		case ENUM_CLOTHOIDCURVE:	stream << ".CLOTHOIDCURVE."; break;
		case ENUM_COSINECURVE:	stream << ".COSINECURVE."; break;
		case ENUM_CUBICPARABOLA:	stream << ".CUBICPARABOLA."; break;
		case ENUM_SINECURVE:	stream << ".SINECURVE."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcTransitionCurveType::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_BIQUADRATICPARABOLA:	return L"BIQUADRATICPARABOLA";
		case ENUM_BLOSSCURVE:	return L"BLOSSCURVE";
		case ENUM_CLOTHOIDCURVE:	return L"CLOTHOIDCURVE";
		case ENUM_COSINECURVE:	return L"COSINECURVE";
		case ENUM_CUBICPARABOLA:	return L"CUBICPARABOLA";
		case ENUM_SINECURVE:	return L"SINECURVE";
	}
	return L"";
}
shared_ptr<IfcTransitionCurveType> IfcTransitionCurveType::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcTransitionCurveType>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcTransitionCurveType>(); }
	shared_ptr<IfcTransitionCurveType> type_object( new IfcTransitionCurveType() );
	if( std_iequal( arg, L".BIQUADRATICPARABOLA." ) )
	{
		type_object->m_enum = IfcTransitionCurveType::ENUM_BIQUADRATICPARABOLA;
	}
	else if( std_iequal( arg, L".BLOSSCURVE." ) )
	{
		type_object->m_enum = IfcTransitionCurveType::ENUM_BLOSSCURVE;
	}
	else if( std_iequal( arg, L".CLOTHOIDCURVE." ) )
	{
		type_object->m_enum = IfcTransitionCurveType::ENUM_CLOTHOIDCURVE;
	}
	else if( std_iequal( arg, L".COSINECURVE." ) )
	{
		type_object->m_enum = IfcTransitionCurveType::ENUM_COSINECURVE;
	}
	else if( std_iequal( arg, L".CUBICPARABOLA." ) )
	{
		type_object->m_enum = IfcTransitionCurveType::ENUM_CUBICPARABOLA;
	}
	else if( std_iequal( arg, L".SINECURVE." ) )
	{
		type_object->m_enum = IfcTransitionCurveType::ENUM_SINECURVE;
	}
	return type_object;
}
