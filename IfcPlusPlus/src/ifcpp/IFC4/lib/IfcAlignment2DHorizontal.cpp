/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcAlignment2DHorizontal.h"
#include "ifcpp/IFC4/include/IfcAlignment2DHorizontalSegment.h"
#include "ifcpp/IFC4/include/IfcAlignmentCurve.h"
#include "ifcpp/IFC4/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4/include/IfcStyledItem.h"

// ENTITY IfcAlignment2DHorizontal 
IfcAlignment2DHorizontal::IfcAlignment2DHorizontal( int id ) { m_entity_id = id; }
shared_ptr<BuildingObject> IfcAlignment2DHorizontal::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcAlignment2DHorizontal> copy_self( new IfcAlignment2DHorizontal() );
	if( m_StartDistAlong ) { copy_self->m_StartDistAlong = dynamic_pointer_cast<IfcLengthMeasure>( m_StartDistAlong->getDeepCopy(options) ); }
	for( size_t ii=0; ii<m_Segments.size(); ++ii )
	{
		auto item_ii = m_Segments[ii];
		if( item_ii )
		{
			copy_self->m_Segments.emplace_back( dynamic_pointer_cast<IfcAlignment2DHorizontalSegment>(item_ii->getDeepCopy(options) ) );
		}
	}
	return copy_self;
}
void IfcAlignment2DHorizontal::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCALIGNMENT2DHORIZONTAL" << "(";
	if( m_StartDistAlong ) { m_StartDistAlong->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	writeEntityList( stream, m_Segments );
	stream << ");";
}
void IfcAlignment2DHorizontal::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_entity_id; }
const std::wstring IfcAlignment2DHorizontal::toString() const { return L"IfcAlignment2DHorizontal"; }
void IfcAlignment2DHorizontal::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 2 ){ std::stringstream err; err << "Wrong parameter count for entity IfcAlignment2DHorizontal, expecting 2, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw BuildingException( err.str().c_str() ); }
	m_StartDistAlong = IfcLengthMeasure::createObjectFromSTEP( args[0], map );
	readEntityReferenceList( args[1], m_Segments, map );
}
void IfcAlignment2DHorizontal::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IfcGeometricRepresentationItem::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "StartDistAlong", m_StartDistAlong ) );
	if( !m_Segments.empty() )
	{
		shared_ptr<AttributeObjectVector> Segments_vec_object( new AttributeObjectVector() );
		std::copy( m_Segments.begin(), m_Segments.end(), std::back_inserter( Segments_vec_object->m_vec ) );
		vec_attributes.emplace_back( std::make_pair( "Segments", Segments_vec_object ) );
	}
}
void IfcAlignment2DHorizontal::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IfcGeometricRepresentationItem::getAttributesInverse( vec_attributes_inverse );
	if( !m_ToAlignmentCurve_inverse.empty() )
	{
		shared_ptr<AttributeObjectVector> ToAlignmentCurve_inverse_vec_obj( new AttributeObjectVector() );
		for( size_t i=0; i<m_ToAlignmentCurve_inverse.size(); ++i )
		{
			if( !m_ToAlignmentCurve_inverse[i].expired() )
			{
				ToAlignmentCurve_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcAlignmentCurve>( m_ToAlignmentCurve_inverse[i] ) );
			}
		}
		vec_attributes_inverse.emplace_back( std::make_pair( "ToAlignmentCurve_inverse", ToAlignmentCurve_inverse_vec_obj ) );
	}
}
void IfcAlignment2DHorizontal::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcGeometricRepresentationItem::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcAlignment2DHorizontal> ptr_self = dynamic_pointer_cast<IfcAlignment2DHorizontal>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcAlignment2DHorizontal::setInverseCounterparts: type mismatch" ); }
	for( size_t i=0; i<m_Segments.size(); ++i )
	{
		if( m_Segments[i] )
		{
			m_Segments[i]->m_ToHorizontal_inverse.emplace_back( ptr_self );
		}
	}
}
void IfcAlignment2DHorizontal::unlinkFromInverseCounterparts()
{
	IfcGeometricRepresentationItem::unlinkFromInverseCounterparts();
	for( size_t i=0; i<m_Segments.size(); ++i )
	{
		if( m_Segments[i] )
		{
			std::vector<weak_ptr<IfcAlignment2DHorizontal> >& ToHorizontal_inverse = m_Segments[i]->m_ToHorizontal_inverse;
			for( auto it_ToHorizontal_inverse = ToHorizontal_inverse.begin(); it_ToHorizontal_inverse != ToHorizontal_inverse.end(); )
			{
				weak_ptr<IfcAlignment2DHorizontal> self_candidate_weak = *it_ToHorizontal_inverse;
				if( self_candidate_weak.expired() )
				{
					++it_ToHorizontal_inverse;
					continue;
				}
				shared_ptr<IfcAlignment2DHorizontal> self_candidate( *it_ToHorizontal_inverse );
				if( self_candidate.get() == this )
				{
					it_ToHorizontal_inverse= ToHorizontal_inverse.erase( it_ToHorizontal_inverse );
				}
				else
				{
					++it_ToHorizontal_inverse;
				}
			}
		}
	}
}
