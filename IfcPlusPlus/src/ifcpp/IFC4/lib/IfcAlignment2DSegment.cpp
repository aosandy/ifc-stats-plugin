/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcAlignment2DSegment.h"
#include "ifcpp/IFC4/include/IfcBoolean.h"
#include "ifcpp/IFC4/include/IfcLabel.h"
#include "ifcpp/IFC4/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4/include/IfcStyledItem.h"

// ENTITY IfcAlignment2DSegment 
IfcAlignment2DSegment::IfcAlignment2DSegment( int id ) { m_entity_id = id; }
shared_ptr<BuildingObject> IfcAlignment2DSegment::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcAlignment2DSegment> copy_self( new IfcAlignment2DSegment() );
	if( m_TangentialContinuity ) { copy_self->m_TangentialContinuity = dynamic_pointer_cast<IfcBoolean>( m_TangentialContinuity->getDeepCopy(options) ); }
	if( m_StartTag ) { copy_self->m_StartTag = dynamic_pointer_cast<IfcLabel>( m_StartTag->getDeepCopy(options) ); }
	if( m_EndTag ) { copy_self->m_EndTag = dynamic_pointer_cast<IfcLabel>( m_EndTag->getDeepCopy(options) ); }
	return copy_self;
}
void IfcAlignment2DSegment::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCALIGNMENT2DSEGMENT" << "(";
	if( m_TangentialContinuity ) { m_TangentialContinuity->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_StartTag ) { m_StartTag->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_EndTag ) { m_EndTag->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IfcAlignment2DSegment::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_entity_id; }
const std::wstring IfcAlignment2DSegment::toString() const { return L"IfcAlignment2DSegment"; }
void IfcAlignment2DSegment::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 3 ){ std::stringstream err; err << "Wrong parameter count for entity IfcAlignment2DSegment, expecting 3, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw BuildingException( err.str().c_str() ); }
	m_TangentialContinuity = IfcBoolean::createObjectFromSTEP( args[0], map );
	m_StartTag = IfcLabel::createObjectFromSTEP( args[1], map );
	m_EndTag = IfcLabel::createObjectFromSTEP( args[2], map );
}
void IfcAlignment2DSegment::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IfcGeometricRepresentationItem::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "TangentialContinuity", m_TangentialContinuity ) );
	vec_attributes.emplace_back( std::make_pair( "StartTag", m_StartTag ) );
	vec_attributes.emplace_back( std::make_pair( "EndTag", m_EndTag ) );
}
void IfcAlignment2DSegment::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IfcGeometricRepresentationItem::getAttributesInverse( vec_attributes_inverse );
}
void IfcAlignment2DSegment::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcGeometricRepresentationItem::setInverseCounterparts( ptr_self_entity );
}
void IfcAlignment2DSegment::unlinkFromInverseCounterparts()
{
	IfcGeometricRepresentationItem::unlinkFromInverseCounterparts();
}
